/* keysym.vapi generated by valac 0.13.1.121-026b, do not modify. */

[CCode (cprefix = "NeoLayoutViewer", lower_case_cprefix = "neo_layout_viewer_")]
namespace NeoLayoutViewer {
	[CCode (ref_function = "neo_layout_viewer_app_status_icon_ref", unref_function = "neo_layout_viewer_app_status_icon_unref", cheader_filename = "src/main.h")]
	public class AppStatusIcon {
		public Gtk.StatusIcon trayicon;
		public AppStatusIcon (NeoLayoutViewer.NeoWindow neo_win);
		public void create_menuMain ();
	}
	[CCode (ref_function = "neo_layout_viewer_config_manager_ref", unref_function = "neo_layout_viewer_config_manager_unref", cheader_filename = "src/main.h")]
	public class ConfigManager {
		public Gee.HashMap<string,string> config;
		public ConfigManager (string conffile);
		public void add_defaults ();
		public Gee.HashMap<string,string> getConfig ();
	}
	[CCode (cheader_filename = "src/main.h")]
	public class KeyEventBox : Gtk.EventBox {
		public KeyEventBox (NeoLayoutViewer.NeoWindow winMain, int width, int height, ref uint[] keysym);
		public KeyEventBox.freeArea (NeoLayoutViewer.NeoWindow winMain, int width, int height);
		public KeyEventBox.modifier (NeoLayoutViewer.NeoWindow winMain, int width, int height, int modifier_index);
		public KeyEventBox.modifier2 (NeoLayoutViewer.NeoWindow winMain, int width, int height, int modifier_index, string pressed_key_image);
		public override void size_request (out Gtk.Requisition requisition);
	}
	[CCode (cheader_filename = "src/main.h")]
	public class KeyOverlay : Gtk.VBox {
		public Gee.HashMap<int,NeoLayoutViewer.KeyEventBox> keyBoxes;
		public Gee.HashMap<int,NeoLayoutViewer.ArrayBox> keysyms;
		public KeyOverlay (NeoLayoutViewer.NeoWindow winMain);
		public void generateKeyevents ();
		public Gee.HashMap<int,NeoLayoutViewer.ArrayBox> generateKeysyms ();
	}
	[CCode (cheader_filename = "src/main.h")]
	public class KeybindingManager : GLib.Object {
		[CCode (cheader_filename = "src/main.h")]
		public delegate void KeybindingHandlerFunc (Gdk.Event event);
		public KeybindingManager (NeoLayoutViewer.NeoWindow neo_win);
		public void bind (string accelerator, NeoLayoutViewer.KeybindingManager.KeybindingHandlerFunc handler);
		public Gdk.FilterReturn event_filter (Gdk.XEvent gdk_xevent, Gdk.Event gdk_event);
		public void unbind (string accelerator);
	}
	[CCode (ref_function = "neo_layout_viewer_modkey_ref", unref_function = "neo_layout_viewer_modkey_unref", cheader_filename = "src/main.h")]
	public class Modkey {
		public int active;
		public Gtk.Image modKeyImage;
		public int modifier_index;
		public Modkey (ref Gtk.Image i, int m);
		public void change (int new_state);
	}
	[CCode (cheader_filename = "src/main.h")]
	public class NeoWindow : Gtk.Window {
		public int[] MODIFIER_MASK;
		public int[] NEO_MODIFIER_MASK;
		public int[] active_modifier_by_keyboard;
		public int[] active_modifier_by_mouse;
		public Gee.HashMap<string,string> config;
		public int function_keys_height;
		public int layer;
		public Gee.List<NeoLayoutViewer.Modkey> modifier_key_images;
		public int numpad_width;
		public Gtk.Label status;
		public NeoWindow (string slayer, Gee.HashMap<string,string> config);
		public void change_active_modifier (int mod_index, bool keyboard, int new_mod_state);
		public void external_key_press (int iet1, int modifier_mask);
		public void external_key_release (int iet1, int modifier_mask);
		public int getActiveModifierMask (int[] modifier);
		public Gdk.Pixbuf getIcon ();
		public void get_size2 (out int width, out int height);
		public override void hide ();
		public void load_image_buffer ();
		public void numkeypad_move (int pos);
		public Gdk.Pixbuf open_image (int layer);
		public Gdk.Pixbuf open_image_str (string bildpfad);
		public void redraw ();
		public override void show ();
		public bool toggle ();
	}
	[CCode (cheader_filename = "src/main.h")]
	public static NeoLayoutViewer.ConfigManager configm;
	[CCode (cheader_filename = "src/main.h")]
	public static NeoLayoutViewer.KeybindingManager manager;
	[CCode (cheader_filename = "src/main.h")]
	public static NeoLayoutViewer.AppStatusIcon neo_tray;
	[CCode (cheader_filename = "src/main.h")]
	public static NeoLayoutViewer.NeoWindow neo_win;
	[CCode (cheader_filename = "src/main.h")]
	public static int main (string[] args);
}
